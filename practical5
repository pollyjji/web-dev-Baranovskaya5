<!DOCTYPE html>
<html lang="en">
<head>
<title>CSS Template</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>


* {
  box-sizing: border-box;
}

body {
  font-family: Arial, Helvetica, sans-serif;
}

/* Style the header */
header {
  background-color: #638a66;
  padding: 30px;
  text-align: center;
  font-size: 35px;
  color: white;
}

/* Create two columns/boxes that floats next to each other */
nav {
  float: left;
  width: 30%;
  height:  1650px; /* only for demonstration, should be removed */
  background: #a2bda2;
  padding: 20px;
}

/* Style the list inside the menu */
nav ul {
  list-style-type: circle;
  padding: 0;
}

article {
  float: left;
  padding: 20px;
  width: 100%;
  background-color: #FFFAFA;
  height: 1650px; /* only for demonstration, should be removed */
}

/* Clear floats after the columns */
section::after {
  content: "";
  display: table;
  clear: both;
}

/* Style the footer */
footer {
  background-color: #638a66;
  padding: 10px;
  text-align: center;
  color: white;
}

/* Responsive layout - makes the two columns/boxes stack on top of each other instead of next to each other, on small screens */
@media (max-width: 600px) {
  nav, article {
    width: 100%;
    height: auto;
  }
}
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

li {
  display: inline;
}
</style>
</head>
<body>


<header> 
<h1>Polina Baranovskaya </h1>


<style>
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

li {
  display: inline;
}
</style>
</head>
<body>

<ul>
  <li><a href="#1">Question1</a></li>
  <li><a href="#2">Question2</a></li>
  <li><a href="#3">Question3</a></li>
  <li><a href="#4">Question4</a></li>
  <li><a href="#5">Question5</a></li>

</ul>

</header>
   
  

  <article>
  <dl>
 
    <dt id="1" ><h1>Question1</h1></dt>
    <h1>What is a box model in CSS. Give box-sizing property definition?</h1>
<img src="box.png" align="right" max-width: 350px />
   <dd> The Box model in CSS is a conceptual model that defines how HTML elements are placed on a page. It includes four main components: content, padding, border and margin. Each component can be customized using different CSS properties.
<p>
The box-sizing property determines how the total size of the element should be calculated. It can take three values:
<p>
- content-box (standard value) - the total size of the element is equal to the sum of the width/height of the content, padding and border.
<p>
- padding-box - The total size includes content and padding, but not border.
<p>
- border-box - The total size includes content, padding and border.</dd>
    
 



  <dl>

    <dt id="2" ><h1>Question2</h1></dt>
     <h1>What is a “clearfix hack” and when does it need to be applied?</h1>
<img src="hack.png" style="float:right; max-width:350px;" />
   <dd> The "Clearfix hack" is a technique used to solve a problem with a parent container when its floating child elements extend beyond the container. This technique adds a pseudo-element after the last child element to "clear" the parent container.
   <p>
The Clearfix hack is usually used when the parent container contains child elements with floating positioning, and you need the parent container to wrap around its child elements.
</dd>
    <dd> 

    </dd> 
    <dl>
 
    <dt id="3" ><h1>Question3</h1></dt>
     <h1>What is a “margin collapse” and what are the use cases for margin: auto and negative margin values?</h1>
   <img src="margin.png" style="float:right; max-width:350px;" />

     <dd>"Margin collapse" is a situation where vertical margins between adjacent elements "collapse" into one common margin equal to the maximum of the two.
<p>
Margin: auto is used for automatic horizontal centering of block elements when their width is less than the width of the parent container.
<p>
Negative margin values can be used to overlap elements, create an overlap effect, or to offset an element relative to its normal position. </dd>

   <dd> 


     <dl>
    <dl>
 

 
    <dt id="4" ><h1>Question4</h1></dt>
    <h1>What was the problem with achieving Holy Grail layout?</h1>

 <img src="problem.png" style="float:right; max-width:350px;" />
   <dd> The "Holy Grail layout" is a popular page layout consisting of a header, main content, side columns and a basement. Traditionally, achieving such a layout has been problematic due to CSS limitations. The use of floating elements, absolute positioning, or tables led to complex and fragile solutions.
</dd>
<dd> 

     <style>

</style> </dd>
    <dl>
    <dl>
 
    <dt id="5" ><h1>Question5</h1></dt>
    <h1>What are the modern ways to achieve Holy Grail layout?</h1>

   <dd> Modern CSS technologies have made it much easier to achieve the "Holy Grail layout":
<p>
1. Flexbox - allows you to easily create complex multi-row layouts using simple flex-direction, justify-content and align-items properties.
<p>
2. CSS Grid - makes it possible to define complex two-dimensional layouts using grid-template-rows, grid-template-columns and other properties.
<p>
3. CSS modules - divide CSS code into logical modules, making it easier to support and scale large projects.
<p>
4. CSS frameworks such as Bootstrap or Foundation provide ready-made solutions for "Holy Grail layout" and other typical layouts.
</dd>
  <img src="ways.png" style="float:right; max-width:350px;" />
    <dl>
   
    
    
   
    
  </article>
</section>


<footer>

  <p> Polina Baranovskaya 354 PW5 </p>
<p>Hello, I want to say a few words about this work, I liked doing it because I could experiment with different features, I also took the time to study all the links and conditions in the task. Thank you</p>
  
</footer>

</body>

</html>
